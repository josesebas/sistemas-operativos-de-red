package javaapplication1;

import static com.sun.org.apache.xalan.internal.lib.ExsltMath.random;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import static java.lang.Math.random;
import static java.lang.StrictMath.random;
import static java.lang.Thread.currentThread;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import static jdk.nashorn.internal.objects.NativeMath.random;


public class Monitor extends javax.swing.JFrame implements Runnable{
int valores=0;
ArrayList<String> lista = new ArrayList<String>();
//ArrayList<String> estados=new ArrayList<String>();

    
/**
     * Creates new form Monitor
     */
    public Monitor() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        
        /*estados.add("RUNNABLE");
        estados.add("NEW");
        estados.add("TERMINATED");
        */ try {
            String process;
            // getRuntime: Returns the runtime object associated with the current Java application.
            // exec: Executes the specified string command in a separate process.
            Process p = Runtime.getRuntime().exec("tasklist.exe /fo csv /nh");
            
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((process = input.readLine()) != null) {
                   
                   String aux[] = process.split(","); // <-- Print all Process here line
                   //System.out.println(aux[0] +"-"+aux[1]);                                                      // by line
                   lista.add(aux[0] +"-"+aux[1]);
            }
            input.close();
        } catch (Exception err) {
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        botonSalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        procesos = new javax.swing.JTable();
        botonStart = new javax.swing.JButton();
        pausar = new javax.swing.JButton();
        terminar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(30, 120));

        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Jos√© Eduardo Sebas Villegas ");

        botonSalir.setText("Salir");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        procesos.setAutoCreateRowSorter(true);
        procesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proceso -  ID", "Estado"
            }
        ));
        jScrollPane2.setViewportView(procesos);

        botonStart.setText("Reanudar");
        botonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStartActionPerformed(evt);
            }
        });

        pausar.setText("Pausar");
        pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarActionPerformed(evt);
            }
        });

        terminar.setText("Terminar");
        terminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                terminarMouseClicked(evt);
            }
        });

        jMenu1.setText("Acerca de");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(botonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(terminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonStart)
                    .addComponent(pausar)
                    .addComponent(terminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_botonSalirActionPerformed
    public void runTable(){
        DefaultTableModel model = (DefaultTableModel)procesos.getModel();
        ArrayList<Proceso> hl = new ArrayList<Proceso>();
        for(int i = 0; i<lista.size(); i++){
            
            try {
                int limiteInferior = 600;
                int limiteSuperior = 1600;
                Random r = new Random(); 
                int resultado = r.nextInt((limiteSuperior - limiteInferior) + 1) + limiteInferior;
                
                Proceso temp = new Proceso(lista.get(valores).toString());
                //System.out.println("1er estado "+hl.get(i).t.getState());
                temp.t.start();
                hl.add(temp);
                model.addRow(new Object[]{ hl.get(i).nombre,hl.get(i).estado});
                hl.get(i).t.sleep(resultado);
                //cambiar estado de anteriores procesos
                limiteInferior = 0;
                limiteSuperior = valores;
                r = new Random(); 
                resultado = r.nextInt((limiteSuperior - limiteInferior) + 1) + limiteInferior;
                //System.out.println("random" + resultado);
                if (model.getValueAt(resultado, 1)=="NEW") {
                    model.setValueAt("RUNNABLE", resultado, 1);
                    //System.out.println("random " + resultado);
                }else if(model.getValueAt(resultado, 1)=="RUNNABLE"){
                    model.setValueAt("TERMINATED", resultado, 1);
                }
       
            } catch (InterruptedException ex) {
                Logger.getLogger(Monitor.class.getName()).log(Level.SEVERE, null, ex);
                
            }
            
             
            valores++;
        }
    }
    private void botonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStartActionPerformed
     DefaultTableModel model = (DefaultTableModel)procesos.getModel();
        int selectedRowIndex = procesos.getSelectedRow();
         //model.setValueAt("RUNNABLE", selectedRowIndex,1);
    
        try{
            Thread.currentThread().sleep(500);
           System.out.println("t" + Thread.currentThread().getState());
         
        }catch(Exception e){
        }
        
        if(model.getValueAt(selectedRowIndex, 1) == "TIMED_WAITING"){
                model.setValueAt("RUNNABLE", selectedRowIndex,1);         
        }
                       
    }//GEN-LAST:event_botonStartActionPerformed

    private void pausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarActionPerformed
        DefaultTableModel model = (DefaultTableModel)procesos.getModel();
        int selectedRowIndex = procesos.getSelectedRow();
         //model.setValueAt("RUNNABLE", selectedRowIndex,1);
    
        try{
            Thread.currentThread().sleep(500);
           System.out.println("t" + Thread.currentThread().getState());
         
        }catch(Exception e){
        }
        
        if(model.getValueAt(selectedRowIndex, 1) == "RUNNABLE" ||  model.getValueAt(selectedRowIndex, 1) == "NEW" ){
                model.setValueAt("TIMED_WAITING", selectedRowIndex,1);         
        }
    }//GEN-LAST:event_pausarActionPerformed

    private void terminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_terminarMouseClicked
        DefaultTableModel model = (DefaultTableModel)procesos.getModel();
        int selectedRowIndex = procesos.getSelectedRow();
         model.setValueAt("RUNNABLE", selectedRowIndex,1);
    
        try{
            Thread.currentThread().sleep(500);
           System.out.println("t" + Thread.currentThread().getState());
         
        }catch(Exception e){
        }
        
        if(model.getValueAt(selectedRowIndex, 1) == "RUNNABLE" || model.getValueAt(selectedRowIndex, 1) =="TIMED_WAITING"|| model.getValueAt(selectedRowIndex, 1) == "NEW" ){
                model.setValueAt("TERMINATED", selectedRowIndex,1);         
        }
        
        
        
    }//GEN-LAST:event_terminarMouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        JOptionPane.showMessageDialog(this, "Monitor de Procesos"+ "\nPuedes seleccionar alguno de los procesos que se estan ejecutando y cambiarlos de estado, hay algunas \nrestricciones, no puedes pausar un proceso terminado  y no puedes reanudar un proceso terminado"
                + "\nBibliograf√≠a: "
                + "\nTANENBAUM Andrew - Sistemas Operativos Diseno e Implementacion"
                + "\nStallings.William - Sistemas Operativos");
    }//GEN-LAST:event_jMenu1MouseClicked
    public void agregar(){
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton botonSalir;
    private javax.swing.JButton botonStart;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton pausar;
    public javax.swing.JTable procesos;
    private javax.swing.JButton terminar;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JLabel title2;
    Thread thread;
    
    
    @Override
    public void run() {
          //DefaultTableModel model = (DefaultTableModel)procesos.getModel();
          /*Thread.State state = thread.currentThread().getState();
          /*model.addRow(new Object[]{thread.currentThread().getName(),state});
	*//*	System.out.println(thread.currentThread().getName() + " state is - "
				+ state);
*/
    }
}
